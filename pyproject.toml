[project]
name = "spectral-parareal-experiments"
version = "0.1.0"
description = ""
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "pymor==2024.1.2",
    "h5py>=3.12.1",
    "mpi4py",
    "meshio",
    "scikit-fem",
    "tqdm",
]

[dependency-groups]
dev = [
    "ruff>=0.7.2",
]

[tool.ruff]
src = ["src"] # this makes isort behave nicely
line-length = 120

[tool.ruff.lint]
select = [
  "F", # Pyflakes
  "W", # pycodestyle warning
  "E", # pycodestyle error
  "I", # isort
  "N", # pep8-naming
  "D", # pydocstyle
  "UP", # pyupgrade
  "YTT", # flake8-2020
  "ASYNC", # flake8-async
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "EXE", # flake8-executable
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "PT", # flake8-pytest-style
  "Q", # flake8-quotes
  "RSE", # flake8-raise
  "SIM", # flake8-simplify
  "TD", # flake8-todos
  "PGH", # pygrep-hooks
  "RUF", # Ruff-specific rules
  "NPY", # NumPy-specific rules
]
ignore = [
  "B006", # do not use mutable data structures for argument defaults
  "B007", # loop control variable not used within loop body
  "B008", # do not perform function call in argument defaults
  "B011", # do not `assert False`
  "B017", # pytest.raises(Exception) should be considered evil
  "B028", # no explicit `stacklevel` keyword argument found
  "C408", # unnecessary collection (dict, list, tuple) call
  "D100", # missing docstring in public module
  "D101", # missing docstring in public class
  "D102", # missing docstring in public method
  "D103", # missing docstring in public function
  "D104", # missing docstring in public package
  "D105", # missing docstring in magic method
  "D106", # missing docstring in public nested class
  "D401", # first line of docstring should be in imperative mood
  "D404", # first word of the docstring should not be "This"
  "D405", # the linter thinks the argument name 'parameters' is a docstring section
  "D407", # same as above
  "D410", # same as above
  "D411", # same as above
  "D414", # same as above
  "E402", # module level import not at top of file (due to config.require("PKG") syntax)
  "E731", # do not assign a lambda expression, use a def
  "E741", # do not use variables named 'l', 'O', or 'I'
  "N802", # function name should be lowercase
  "N803", # argument name should be lowercase (we use single capital letters everywhere for vectorarrays)
  "N806", # same for variables in function
  "PT011", # pytest.raises(Exception) is too broad
  "PT012", # pytest.raises() block should contain a single simple statement
  "PT015", # assertion always fails, replace with `pytest.fail()`
  "RUF005", # consider unpacking instead of concatenation
  "SIM102", # use a single if statement instead of nested if statements
  "SIM103", # return the condition directly
  "SIM105", # use contextlib.suppress instead of try-except-pass
  "SIM108", # use ternary operator instead of if-else-block
  "SIM114", # combine if branches using logical or operator
  "SIM116", # use a dictionary instead of consecutive `if` statements
  "SIM300", # Yoda conditions
  "TD002", # missing author in TODO
  "TD003", # missing issue link on the line following this TODO
]

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["numpy.linalg"] # avoids importing similar routines from numpy.linalg and scipy.linalg


[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # module imported but unused
"docs/source/try_on_binder.py" = ["N801"] # class name CapWords convention
"src/pymor/algorithms/genericsolvers.py" = ["TD001"] # invalid TODO tag (XXX)
"src/pymor/algorithms/rules.py" = ["N801", "N805"] # class name CapWords convention, first argument should be `self`
"src/pymor/analyticalproblems/expressions.py" = ["N801"] # class name CapWords convention
"src/pymor/basic.py" = ["F401"] # ununsed imports
"src/pymordemos/*" = ["F403", "F405"] # undefined import due to pymor.basic functionality

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.pydocstyle]
convention = "numpy"
